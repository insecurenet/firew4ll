/*
 * gitsync
 *
 * part of pense (https://www.pense.org)
 * Copyright (c) 2010-2012 Erik Fonnesbeck
 * Copyright (c) 2004-2018 Rubicon Communications, LLC (Netgate)
 * All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

require_once("globals.inc");
require_once("filter.inc");
require_once("shaper.inc");
require_once("rrd.inc");
require_once("pfsense-utils.inc");

$GIT_PKG = "git"; // Either "git" or the full package URL
$GIT_BIN= "/usr/local/bin/git";
$GIT_REPO = "git://github.com/insecurenet/firew4ll.git";
$DEFAULT_BRANCH = "RELENG_0_1";
$CODIR =  "/root/firew4ll";
$GITSYNC_MERGE = "/root/.gitsync_merge";

/* NOTE: Set branches here */
$branches = array(
	"master" => "0.1 development branch",
	"RELENG_0_1" => "0.1 test branch",
	"build_commit" => "The commit originally used to build the image"
);

global $g;
global $argv;
global $command_split;

if (is_array($command_split)) {
	$temp_args = array_slice($command_split, 2);
} else {
	$temp_args = array_slice($argv, 3);
}

$valid_args = array(
	"--minimal" => "\tEseguire una copia dei soli file aggiornati.\n" .
	    "\tSconsigliato se il sistema ha file modificati con qualsiasi altro metodo\n" .
	    "\tdiverso da gitsync.\n",
	"--diff" => "\tEseguire una copia dei soli file diversi e mancanti.\n" .
	    "\tConsigliato per SSD se il sistema ha file modificati con qualsiasi altro metodo\n" .
	    "\tdiverso da gitsync.\n",
	"--show-files" => "\tMostra i file aggiornati, diversi e mancanti.\n" .
	    "\t(se usato con le opzioni --minimal e --diff)\n",
	"--show-command" => "\tMostra il comando costruito.\n",
	"--dry-run" => "\tSolo Dry-run.  Nessun file copiato.\n",
	"--help" => "\tVisualizza questa lista di aiuto.\n"
	);
$args = array();
$arg_count = 0;
while (!empty($temp_args)) {
	$arg = array_shift($temp_args);
	if ($arg[0] == '-') {
		switch ($arg) {
			case "--help":
				echo "Usa: playback gitsync [options] [[repository] <branch>]\nOpzioni:\n";
				foreach ($valid_args as $arg_name => $arg_desc) {
					echo $arg_name . "\n" . $arg_desc;
				}
				exit;
			case "--upgrading":
				// Disables all interactive functions and neither PHP
				// nor the web GUI will be killed or restarted.
				$upgrading = true;
			case (isset($valid_args[$arg])):
				$args[$arg] = true;
				break;
			default:
				echo "Opzione non valida: {$arg}\nUsa --help per informazioni uso.\n";
				exit;
		}
	} else {
		$args[$arg_count++] = $arg;
	}
}

if (!function_exists('post_cvssync_commands')) {
function post_cvssync_commands() {
	echo "===> Rimozione di file temporanei FAST-CGI...\n";
	exec("find /tmp -name \"php-fastcgi.socket*\" -exec rm -rf {} \;");
	exec("find /tmp -name \"*.tmp\" -exec rm -rf {} \;");

	exec("rm -rf /tmp/xcache/* 2>/dev/null");

	echo "===> Aggiornamento della configurazione (se necessario)...\n";
	convert_config();

	echo "===> Configurazione filtro...";
	exec("/etc/rc.filter_configure_sync");
	exec("pfctl -f /tmp/rules.debug");
	echo "\n";

	if (file_exists("/etc/rc.php_ini_setup")) {
		echo "===> In esecuzione /etc/rc.php_ini_setup...";
		exec("/etc/rc.php_ini_setup >/dev/null 2>&1");
		echo "\n";
	}

	/* lock down console if necessary */
	echo "===> Bloccare la console se necessario...\n";
	reload_ttys();

	echo "===> Segnalazione di riavvio PHP e NGINX...";
	$fd = fopen("/tmp/restart_nginx", "w");
	fwrite($fd, "#!/bin/sh\n");
	fwrite($fd, "sleep 5\n");
	fwrite($fd, "/usr/local/sbin/pfSctl -c 'service restart webgui'\n");
	fclose($fd);
	mwexec_bg("sh /tmp/restart_nginx");
	echo "\n";
}
}

if (!function_exists('isUrl')) {
function isUrl($url = "") {
	if ($url) {
		if (strstr($url, "rcs.firew4ll,com") or
			strstr($url, "mainline") or
			strstr($url, ".git") or
			strstr($url, "git://")) {
			return true;
		}
	}
	return false;
}
}

if (!function_exists('run_cmds')) {
function run_cmds($cmds) {
	global $debug;
	foreach ($cmds as $cmd) {
		if ($debug) {
			echo "Running $cmd";
		}
		exec($cmd);
	}
}
}

unlink_if_exists("/tmp/config.cache");

if (!file_exists($GIT_BIN)) {
	require_once("pkg-utils.inc");

	echo "Impossibile trovare git, installare...\n";
	if (!pkg_call('install -y -q git')) {
		echo "\nERRORE: Impossibile installare git pkg.\n";
		return;
	}
}

# Remove mainline if exists (older)
if (is_dir("/root/firew4ll/mainline")) {
	exec("rm -rf /root/firew4ll/mainline");
}

# Remove RELENG_1_2 if exists (older)
if (is_dir("/root/firew4ll/RELENG_1_2")) {
	exec("rm -rf /root/firew4ll/RELENG_1_2");
}

# Remove HEAD if exists (older)
if (is_dir("/root/firew4ll/HEAD")) {
	exec("rm -rf /root/firew4ll/HEAD");
}

if (file_exists("/root/cvssync_backup.tgz")) {
	$backup_date = `ls -lah /root/cvssync_backup.tgz | awk '{ print $6,$7,$8 }'`;
	$tmp = array("RESTORE" => "Restores prior CVSSync backup data performed at {$backup_date}");
	$branches = array_merge($branches, $tmp);
}

if (is_dir("$CODIR/pfSenseGITREPO/pfSenseGITREPO")) {
	exec("cd $CODIR/pfSenseGITREPO/pfSenseGITREPO && {$GIT_BIN} config remote.origin.url", $output_str, $ret);
	if (is_array($output_str) && !empty($output_str[0])) {
		$GIT_REPO = $output_str[0];
	}
	unset($output_str);
}

if (!$args[0] && !$upgrading) {
	echo "\nIl repository attuale $GIT_REPO\n";
	echo "\nSeleziona il ramo che desideri sincronizzare con:\n\n";
	foreach ($branches as $branchname => $branchdesc) {
		echo "{$branchname} \t {$branchdesc}\n";
	}
	echo "\nOppure, in alternativa, inserisci un URL personalizzato del ramo RCS (Git o HTTP).\n\n";
	$branch = readline("> ");
	echo "\n";
} else {
	$branch = $args[0];
}

if ($args[1] == "NOBACKUP") {
	$nobackup = true;
} else {
	$nobackup = false;
}

// If the repository has been fetched before, build a list of its branches.
if (is_dir("$CODIR/pfSenseGITREPO/pfSenseGITREPO")) {
	exec("cd $CODIR/pfSenseGITREPO/pfSenseGITREPO && {$GIT_BIN} branch -r", $branch_list, $ret);
	if ($ret == 0 && is_array($branch_list)) {
		foreach ($branch_list as $branch_item) {
			$branch_item = substr(strrchr($branch_item, "/"), 1);
			if (!isset($branches[$branch_item])) {
				$branches[$branch_item] = " ";
			}
		}
	}
}

$found = false;
foreach ($branches as $branchname => $branchdesc) {
	if ($branchname == $branch) {
		$found = true;
		break;
	}
}
if (!$found) {
	if (isURL($branch) && !$upgrading) {
		if ($args[1]) {
			$GIT_REPO = $branch;
			$branch = $args[1];
			$found = true;
		} else {
			echo "\n";
			echo "NOTA: $branch non trovato.\n\n";
			$command = readline("Is this a custom GIT URL? [y]? ");
			if (strtolower($command) == "y" or $command == "") {
				$GIT_REPO = $branch;
				$command = readline("Checkout which branch [${DEFAULT_BRANCH}]? ");
				if ($command == "") {
					$branch = $DEFAULT_BRANCH;
				}
				if ($command) {
					$branch = $command;
				}
				$found = true;
			}
		}
	}
	if (!$found) {
		echo "\nNessun ramo valido trovato.  Uscita.\n\n";
		exit;
	}
}

$merge_repos = array();
if (file_exists($GITSYNC_MERGE)) {
	$gitsync_merges = file($GITSYNC_MERGE, FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
	if (!empty($gitsync_merges) && is_array($gitsync_merges)) {
		echo "\n===> Automatic merge list read from ${GITSYNC_MERGE}\n";
		foreach ($gitsync_merges as $merge_line_num => $merge_line) {
			$merge_comments = explode("#", trim($merge_line));
			if (empty($merge_comments[0])) {
				continue;
			}

			$merge_line = explode(" ", trim($merge_comments[0]));
			if (count($merge_line) != 2 || empty($merge_line[0]) || empty($merge_line[1])) {
				echo "\nLine " . ($merge_line_num + 1) . " non ha il conteggio corretto dei parametri o ha una spaziatura non corretta.\n";
				echo "Parametri previsti:  repository_url branch\n";
				echo "Line read:  " . implode(" ", $merge_line) . "\n\n";
				echo "Annullamento merge.\n\n";
				$merge_repos = array();
				break;
			}
			$merge_repos[] = array('repo' => $merge_line[0], 'branch' => $merge_line[1]);
		}
	}
}
if (!$args[0] && !$upgrading) {
	do {
		echo "\nAggiung un URL personalizzato del ramo RCS (Git o HTTP) per merge o premere invio se fatto.\n\n";
		$merge_repo = readline("> ");
		if (!empty($merge_repo)) {
			$merge_branch = readline("Merge which branch [${DEFAULT_BRANCH}]? ");
			if ($merge_branch == "") {
				$merge_repos[] = array('repo' => $merge_repo, 'branch' => $DEFAULT_BRANCH);
			} else if ($merge_branch) {
				$merge_repos[] = array('repo' => $merge_repo, 'branch' => $merge_branch);
			}
		}
	} while (!empty($merge_repo));
}

if ($branch == "RESTORE") {
	if (!file_exists("/root/cvssync_backup.tgz")) {
		echo "Spiacenti, non siamo riusciti a trovare un precedente file di backup di CVSSync.\n";
		exit();
	}
	echo "===> Ripristino del precedente backup di CVSSync... Si prega di attendere...\n";
	exec("tar Uxpf /root/cvssync_backup.tgz -C /");
	post_cvssync_commands();
	exit();
} else {
	$nobackup = true; // do not backup embedded
}

if ($nobackup == false) {
	echo "===> Backup delle informazioni attuali di Firew4ll...\n";
	echo "===> Attendere... ";
	exec("tar czPf /root/cvssync_backup.tgz --exclude /root --exclude /dev --exclude /tmp --exclude /var/run --exclude /var/empty /");
	$size = filesize("/root/cvssync_backup.tgz");
	echo "{$size} bytes.\n\n";
	sleep(5);
}

echo "===> Controllando $branch\n";

// Git commands for resetting to the specified branch
if ($branch == "build_commit") {
	$git_cmd = array(
		"cd $CODIR/pfSenseGITREPO/pfSenseGITREPO && {$GIT_BIN} branch " . escapeshellarg($branch) . " 2>/dev/null",
		"cd $CODIR/pfSenseGITREPO/pfSenseGITREPO && {$GIT_BIN} checkout -f " . escapeshellarg($branch) . " 2>/dev/null",
		"cd $CODIR/pfSenseGITREPO/pfSenseGITREPO && {$GIT_BIN} reset --hard " . escapeshellarg(trim(file_get_contents("/etc/version.lastcommit")))
	);
} else {
	$git_cmd = array(
		"cd $CODIR/pfSenseGITREPO/pfSenseGITREPO && {$GIT_BIN} branch " . escapeshellarg($branch) . " " . escapeshellarg("origin/{$branch}") . " 2>/dev/null",
		"cd $CODIR/pfSenseGITREPO/pfSenseGITREPO && {$GIT_BIN} checkout -f " . escapeshellarg($branch) . " 2>/dev/null",
		"cd $CODIR/pfSenseGITREPO/pfSenseGITREPO && {$GIT_BIN} reset --hard " . escapeshellarg("origin/{$branch}")
	);
}

// Git 'er done!
if (is_dir("$CODIR/pfSenseGITREPO/pfSenseGITREPO")) {
	echo "===> Recuperando aggiornamenti...\n";
	exec("cd $CODIR/pfSenseGITREPO/pfSenseGITREPO && {$GIT_BIN} config remote.origin.url " . escapeshellarg($GIT_REPO));
	exec("cd $CODIR/pfSenseGITREPO/pfSenseGITREPO && {$GIT_BIN} fetch");
	exec("cd $CODIR/pfSenseGITREPO/pfSenseGITREPO && {$GIT_BIN} clean -f -x -d");
	run_cmds($git_cmd);
} else {
	exec("mkdir -p $CODIR/pfSenseGITREPO");
	echo "Executing cd $CODIR/pfSenseGITREPO && {$GIT_BIN} clone $GIT_REPO pfSenseGITREPO\n";
	exec("cd $CODIR/pfSenseGITREPO && {$GIT_BIN} clone " . escapeshellarg($GIT_REPO) . " pfSenseGITREPO");
	if (is_dir("$CODIR/pfSenseGITREPO/pfSense")) {
		exec("mv $CODIR/pfSenseGITREPO/pfSense $CODIR/pfSenseGITREPO/pfSenseGITREPO");
	}
	if (is_dir("$CODIR/pfSenseGITREPO/mainline")) {
		exec("mv $CODIR/pfSenseGITREPO/mainline $CODIR/pfSenseGITREPO/pfSenseGITREPO");
	}
	run_cmds($git_cmd);
}

foreach ($merge_repos as $merge_repo) {
	echo "===> Merging branch {$merge_repo['branch']} from {$merge_repo['repo']}\n";
	exec("cd $CODIR/pfSenseGITREPO/pfSenseGITREPO && {$GIT_BIN} pull " . escapeshellarg($merge_repo['repo']) . " " . escapeshellarg($merge_repo['branch']), $output_str, $ret);
	unset($output_str);
	if ($ret <> 0) {
		echo "\nMerge failed.  Aborting sync.\n\n";
		run_cmds($git_cmd);
		exit;
	}
}

$updated_files_array[1] = array();
if (isset($args["--minimal"])) {
	if (file_exists("/etc/version.gitsync")) {
		$old_revision = trim(file_get_contents("/etc/version.gitsync"));
	} else if (file_exists("/etc/version.lastcommit")) {
		$old_revision = trim(file_get_contents("/etc/version.lastcommit"));
	}

	# Find updated files.
	$updated_files = shell_exec("cd $CODIR/pfSenseGITREPO/pfSenseGITREPO && {$GIT_BIN} diff --name-only --relative=src " . escapeshellarg($old_revision));

	# Get the path of each updated file.
	preg_match_all('@(?:^(.+?)$)@sim', $updated_files, $updated_files_array, PREG_PATTERN_ORDER);

	if(isset($args["--show-files"])) {
		echo "===> File aggiornati: \n";
		print_r($updated_files_array[1]);
	}
}

// Save new commit ID for later minimal file copies
if(!isset($args["--dry-run"])) {
	exec("cd $CODIR/pfSenseGITREPO/pfSenseGITREPO && {$GIT_BIN} rev-parse -q --verify HEAD > /etc/version.gitsync");
}

// Remove files that we do not want to overwrite the system with
@unlink("{$CODIR}/pfSenseGITREPO/pfSenseGITREPO/src/etc/crontab");
@unlink("{$CODIR}/pfSenseGITREPO/pfSenseGITREPO/src/etc/master.passwd");
@unlink("{$CODIR}/pfSenseGITREPO/pfSenseGITREPO/src/etc/passwd");
@unlink("{$CODIR}/pfSenseGITREPO/pfSenseGITREPO/src/etc/fstab");
@unlink("{$CODIR}/pfSenseGITREPO/pfSenseGITREPO/src/etc/ttys");
@unlink("{$CODIR}/pfSenseGITREPO/pfSenseGITREPO/src/etc/group");
@unlink("{$CODIR}/pfSenseGITREPO/pfSenseGITREPO/src/etc/fstab");
@unlink("{$CODIR}/pfSenseGITREPO/pfSenseGITREPO/src/etc/platform");
@unlink("{$CODIR}/pfSenseGITREPO/pfSenseGITREPO/src/boot/device.hints");
@unlink("{$CODIR}/pfSenseGITREPO/pfSenseGITREPO/src/boot/loader.conf");
@unlink("{$CODIR}/pfSenseGITREPO/pfSenseGITREPO/src/boot/loader.rc");
@unlink("{$CODIR}/pfSenseGITREPO/pfSenseGITREPO/src/etc/syslog.conf");
@unlink("{$CODIR}/pfSenseGITREPO/pfSenseGITREPO/src/root/.shrc");
@unlink("{$CODIR}/pfSenseGITREPO/pfSenseGITREPO/src/root/.tcshrc");
exec("rm -rf {$CODIR}/pfSenseGITREPO/pfSenseGITREPO/src/conf*");
exec("rm -rf {$CODIR}/pfSenseGITREPO/pfSenseGITREPO/src/cf 2>/dev/null");
@chmod("{$CODIR}/pfSenseGITREPO/pfSenseGITREPO/src/tmp", 01777);

$different_files_array[1] = array();
$missing_files_array[1] = array();
if(isset($args["--diff"])) {
	# Find different and missing files.
	$different_missing_files = shell_exec("/usr/bin/diff -qr / $CODIR/pfSenseGITREPO/pfSenseGITREPO/src/ | /usr/bin/grep -E '^(Files .*? and $CODIR/pfSenseGITREPO/pfSenseGITREPO/src/.*? differ)|(Only in $CODIR/pfSenseGITREPO/pfSenseGITREPO/src/)'");

	# Get the path of each different or missing file.
	preg_match_all('@(?:^Files .*? and '.$CODIR.'/pfSenseGITREPO/pfSenseGITREPO/src/(.+?) differ.*?$)@sim', $different_missing_files, $different_files_array, PREG_PATTERN_ORDER);
	preg_match_all('@(?:^Only in '.$CODIR.'/pfSenseGITREPO/pfSenseGITREPO/src/(.+?)$)@sim', $different_missing_files, $missing_files_array, PREG_PATTERN_ORDER);

	# Deal with diff's output format of missing files (path: missing_file).
	foreach ($missing_files_array[1] as $key => $file) {

		# Most of the time there will be only the one ': ' injected by diff output.  So global replace with dir delimiter (/) is fine.
		$tmp = str_replace(": ", "/", $file, $count);
		if ($count == 1)
			$file = ltrim($tmp, "/");

		# For the very rare case a path component (dir or file) contains ': ' as well, then need to find and replace only the ': ' injected by diff output.
		else {
			$tmp = $file;
			do {
				$pos = strrpos($tmp, ": ");
				if ($pos) {
					$tmp = substr($tmp, 0, $pos);
					$res = is_dir("$CODIR/pfSenseGITREPO/pfSenseGITREPO/src/$tmp/");
				}
			} while (!$res && $pos);

			if ($res)
				$file = ltrim($tmp . "/" . substr($file, $pos+2), "/");
		}

		$missing_files_array[1][$key] = $file;
	}

	if(isset($args["--show-files"])) {
		echo "===> File diversi: \n";
		print_r($different_files_array[1]);
		echo "===> File mancanti: \n";
		print_r($missing_files_array[1]);
	}
}

# Files to be copied.
if(isset($args["--minimal"]) || isset($args["--diff"])) {
	$files_to_copy_array = array_merge($updated_files_array[1], $different_files_array[1], $missing_files_array[1]);
	$files_to_copy_array = array_unique($files_to_copy_array);

	unset($updated_files_array, $different_files_array, $missing_files_array);

	# Convert the list from an array to a space separated quoted string.  Quoted for white space file name support.
	if (count($files_to_copy_array) > 0) {	# Leave the string empty/unset if there is nothing to copy.
		$files_to_copy = '"' . implode('" "', $files_to_copy_array) . '"';
	}
	$qty_files_to_copy = count($files_to_copy_array);
	unset($files_to_copy_array);
} else {
	$files_to_copy = '.';
	$qty_files_to_copy = chr(8);
}

$tar_options = '-C ./src';

echo "===> Installazione $qty_files_to_copy nuovi file...\n";

$command = "cd $CODIR/pfSenseGITREPO/pfSenseGITREPO ; tar -cpf - {$tar_options} {$files_to_copy} | (cd / ; tar -Uxpf -)";

if (!empty($files_to_copy)) {
	if(isset($args["--show-command"])) {
		echo "===> Comandi: \n$command\n";
	}
	if(!isset($args["--dry-run"])) {
		exec($command);
	}
} else {
	echo "Gia aggiornato.\n";
	$upgrading = true;
}

// Reset the repository to restore the deleted files
exec("cd $CODIR/pfSenseGITREPO/pfSenseGITREPO && {$GIT_BIN} reset --hard >/dev/null 2>/dev/null");

// Remove obsolete files
$files_to_remove = file("/etc/Firew4ll.obsoletedfiles");
foreach ($files_to_remove as $file_to_remove) {
	if (file_exists($file_to_remove)) {
		exec("/bin/rm -f $file_to_remove");
	}
}

if (!$upgrading) {
	post_cvssync_commands();
}

echo "===> Checkout completoe.\n";
echo "\n";
if (!$upgrading) {
	echo "Il sistema risulta sincronizzato e PHP e NGINX saranno riavviati in 5 secondi.\n\n";
} else {
	echo "Il sistema risulta sincronizzato.\n\n";
}
